{"version":3,"sources":["images/back_card.jpg","images/1.png","images/1_gray.png","images/2.png","images/2_gray.png","images/3.png","images/3_gray.png","images/4.png","images/4_gray.png","images/5.png","images/5_gray.png","images/6.png","images/6_gray.png","CustomHooks/UseGameState.js","Components/Card.js","Components/CardList.js","CustomHooks/UseCardNumberGenerator.js","Components/TimerComponent.js","Components/GameField.js","Components/StartButton.js","Components/Today.js","Components/StartMenu.js","Components/Credits.js","CustomHooks/UseApplicationState.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useGameState","useState","selecteds","setSelecteds","availables","setAvailables","secondsLeft","setSecondsLeft","useEffect","length","timerId","setTimeout","clearTimeout","addToSelecteds","number","canAddToSelecteds","newSelecteds","concat","filter","e","removeFromSelecteds","s","Cards","Card1","Card2","Card3","Card4","Card5","Card6","GrayCards","Card1Gray","Card2Gray","Card3Gray","Card4Gray","Card5Gray","Card6Gray","Card","props","showImg","setShowImg","useGrayImg","setUseGrayImg","includes","className","alt","type","onClick","onReveal","src","CardBack","style","display","canHide","onHide","CardList","BuildSrc","BuildGraySrc","buildImageUrl","buildGrayImageUrl","cardNumbers","utils","min","max","Array","from","_","i","createRandomNumbers","array","counter","index","Math","floor","random","temp","shuffle","useCardNumberGenerator","setCardNumbers","TimerComponent","GameField","onGameFinished","Button","onStartGame","Months","Today","BuildDate","Date","getMonth","getUTCFullYear","this","React","Component","StartMenu","startGame","Credits","message","status","useApplicationState","gameStatus","setGameStatus","gameId","setGameId","setStatus","App","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.abc2c1c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back_card.fbb0bdca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.db1b6dbe.png\";","module.exports = __webpack_public_path__ + \"static/media/1_gray.9326c6ca.png\";","module.exports = __webpack_public_path__ + \"static/media/2.4b9722d3.png\";","module.exports = __webpack_public_path__ + \"static/media/2_gray.662bd71e.png\";","module.exports = __webpack_public_path__ + \"static/media/3.d793cad2.png\";","module.exports = __webpack_public_path__ + \"static/media/3_gray.818cd7f5.png\";","module.exports = __webpack_public_path__ + \"static/media/4.17faf19d.png\";","module.exports = __webpack_public_path__ + \"static/media/4_gray.62340972.png\";","module.exports = __webpack_public_path__ + \"static/media/5.3484cf6a.png\";","module.exports = __webpack_public_path__ + \"static/media/5_gray.836206e1.png\";","module.exports = __webpack_public_path__ + \"static/media/6.9cb12cd1.png\";","module.exports = __webpack_public_path__ + \"static/media/6_gray.40e18ce6.png\";","import { useState, useEffect } from 'react';\r\n\r\nconst useGameState = () => {\r\n    const [selecteds, setSelecteds] = useState([]);\r\n    const [availables, setAvailables] = useState([1, 2, 3, 4, 5, 6]); \r\n    const [secondsLeft, setSecondsLeft] = useState(25);\r\n\r\n    useEffect(() => {\r\n      if (secondsLeft > 0 && availables.length > 0) {       \r\n        const timerId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1000);\r\n        return () => clearTimeout(timerId);\r\n      }\r\n    });\r\n\r\n    const addToSelecteds = (number) => {\r\n        let canAddToSelecteds = (selecteds.length === 2) ? false : true;\r\n        \r\n        if (canAddToSelecteds){                    \r\n            let newSelecteds = selecteds.concat(number);\r\n            setSelecteds(newSelecteds)            \r\n            if (newSelecteds.length === 2 && newSelecteds[0] === newSelecteds[1]){ \r\n               \r\n                setAvailables(availables.filter(e => e !== number ));\r\n                setSelecteds([]);\r\n            }           \r\n        }\r\n        return canAddToSelecteds;\r\n    }       \r\n\r\n    const removeFromSelecteds = (number) => {\r\n        if (selecteds.length === 0) return;\r\n\r\n        setSelecteds(selecteds.filter(s => s !== number));\r\n    }\r\n    return { selecteds, availables, addToSelecteds, removeFromSelecteds, secondsLeft };\r\n}\r\n\r\nexport default useGameState;","import React,  { useState, useEffect } from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport './Card.css'\r\nimport CardBack from '../images/back_card.jpg';\r\nimport Card1 from '../images/1.png';\r\nimport Card1Gray from '../images/1_gray.png';\r\nimport Card2 from '../images/2.png';\r\nimport Card2Gray from '../images/2_gray.png';\r\nimport Card3 from '../images/3.png';\r\nimport Card3Gray from '../images/3_gray.png';\r\nimport Card4 from '../images/4.png';\r\nimport Card4Gray from '../images/4_gray.png';\r\nimport Card5 from '../images/5.png';\r\nimport Card5Gray from '../images/5_gray.png';\r\nimport Card6 from '../images/6.png';\r\nimport Card6Gray from '../images/6_gray.png';\r\n\r\n\r\nconst Cards = [ Card1, Card2, Card3, Card4, Card5, Card6 ];\r\nconst GrayCards = [ Card1Gray, Card2Gray, Card3Gray, Card4Gray, Card5Gray, Card6Gray ];\r\n\r\nexport default function Card(props) {    \r\n    const [showImg, setShowImg] = useState(false);    \r\n    const [useGrayImg, setUseGrayImg] = useState(false);\r\n\r\n    useEffect(() => {                      \r\n        if (typeof props.number !== 'undefined' \r\n                && typeof props.availables !== 'undefined' \r\n                && !props.availables.includes(props.number)){\r\n            setUseGrayImg(true);\r\n        }\r\n        return () => { }            \r\n    },[props.availables, props.number])\r\n\r\n    const revealNumber = () => {              \r\n        setShowImg(props.onReveal(props.number));             \r\n    }\r\n\r\n    const hideNumber = () => {\r\n        if (props.canHide(props.number))\r\n        {\r\n            props.onHide(props.number);\r\n            setShowImg(false);\r\n        }        \r\n    }\r\n\r\n    return (               \r\n        <div className=\"col-sm-3\">                  \r\n            <input \r\n                alt=\"BackCard\"\r\n                type=\"image\" \r\n                onClick={revealNumber} \r\n                className=\"img-card\" \r\n                src={CardBack}\r\n                style={{display: showImg ? 'none' : 'inline'}}\r\n                >\r\n            </input>       \r\n            <input \r\n                alt=\"FrontCard\"\r\n                type=\"image\"\r\n                onClick={hideNumber}          \r\n                className=\"img-card\"\r\n                src={!useGrayImg ? Cards[props.number - 1]: GrayCards[props.number - 1]}\r\n                style={{display: showImg ? 'inline' : 'none'}}     \r\n                >\r\n            </input>\r\n        </div>\r\n        );\r\n}\r\n\r\nCard.propTypes  = {\r\n    buildImageUrl: PropTypes.func,\r\n    buildGrayImageUrl: PropTypes.func,\r\n    number: PropTypes.number,    \r\n    onReveal: PropTypes.func,\r\n    onHide: PropTypes.func,\r\n    canHide: PropTypes.func,\r\n    availables: PropTypes.array\r\n}","import React from 'react';\r\nimport Card from './Card';\r\nimport { PropTypes } from 'prop-types';\r\n\r\n\r\nconst CardList = (props) => {    \r\n\r\n   const BuildSrc = (number) => { return \"/images/\" + number + \".png\"; } \r\n    const BuildGraySrc = (number) => {return \"/images/\" + number + \"_gray.png\" }    \r\n  \r\n    return (\r\n\r\n        <div className=\"game-field\">             \r\n            <div className=\"row\">                \r\n                <Card \r\n                    buildImageUrl={BuildSrc} \r\n                    buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[0]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide} \r\n                    availables={props.availables}  \r\n                                     \r\n                    />    \r\n                <Card \r\n                     buildImageUrl={BuildSrc} \r\n                     buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[1]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />    \r\n                <Card \r\n                     buildImageUrl={BuildSrc} \r\n                     buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[2]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />   \r\n                <Card \r\n                    buildImageUrl={BuildSrc} \r\n                    buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[3]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />                                                     \r\n            </div>\r\n            <div className=\"row\">                \r\n            <Card \r\n                    buildImageUrl={BuildSrc} \r\n                    buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[4]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />    \r\n                <Card \r\n                   buildImageUrl={BuildSrc} \r\n                   buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[5]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />    \r\n                <Card \r\n                    buildImageUrl={BuildSrc} \r\n                    buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[6]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />   \r\n                <Card \r\n                    buildImageUrl={BuildSrc} \r\n                    buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[7]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />   \r\n            </div>\r\n            <div className=\"row\">                \r\n                <Card \r\n                    buildImageUrl={BuildSrc} \r\n                    buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[8]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />    \r\n                <Card \r\n                   buildImageUrl={BuildSrc} \r\n                   buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[9]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />    \r\n                <Card \r\n                    buildImageUrl={BuildSrc} \r\n                    buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[10]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />   \r\n                <Card \r\n                    buildImageUrl={BuildSrc} \r\n                    buildGrayImageUrl={BuildGraySrc}\r\n                    number={props.cardNumbers[11]} \r\n                    onReveal={props.addToSelecteds} \r\n                    onHide={props.removeFromSelecteds} \r\n                    canHide={props.canHide}   \r\n                    availables={props.availables}  \r\n                                     \r\n                    />   \r\n            </div> \r\n        </div>\r\n        );\r\n}\r\n\r\nCardList.propTypes  = {    \r\n    cardNumbers: PropTypes.array,\r\n    addToSelecteds: PropTypes.func,\r\n    removeFromSelecteds: PropTypes.func,\r\n    canHide: PropTypes.func,\r\n    OnCheckAvailables: PropTypes.func,\r\n    availables: PropTypes.array,\r\n}\r\n\r\nexport default CardList;","import { useState, useEffect } from 'react';\r\n\r\n\r\nconst utils = {\r\n    range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\r\n\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n}\r\n\r\nfunction shuffle(array) {\r\n    let counter = array.length;\r\n\r\n    // While there are elements in the array\r\n    while (counter > 0) {\r\n        // Pick a random index\r\n        let index = Math.floor(Math.random() * counter);\r\n\r\n        // Decrease counter by 1\r\n        counter--;\r\n\r\n        // And swap the last element with it\r\n        let temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst createRandomNumbers = () => {\r\n    let cardsNumbers = utils.range(1, 6).concat(utils.range(1, 6));   \r\n    let shuffleCardNumbers =  shuffle(cardsNumbers);\r\n    return  shuffleCardNumbers;\r\n}\r\n\r\nconst useCardNumberGenerator = () => {\r\n    const [cardNumbers, setCardNumbers] = useState([]);\r\n\r\n    //Es correcto usar el useEffect para llenar una unica vez el arreglo con numeros randoms?\r\n    useEffect(() => {\r\n        if (cardNumbers.length === 0)\r\n            setCardNumbers(createRandomNumbers());\r\n    },[cardNumbers.length])\r\n\r\n    return { cardNumbers };\r\n}\r\n\r\nexport default useCardNumberGenerator;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TimerComponent(props) {\r\n    return (<div className=\"timer\">Time Remaining: {props.secondsLeft}</div>);\r\n}\r\n\r\nTimerComponent.propTypes = {\r\n    secondsLeft: PropTypes.number\r\n}\r\n\r\nexport default TimerComponent;","import React, { useEffect } from 'react';\r\nimport useGameState from '../CustomHooks/UseGameState'\r\nimport { PropTypes } from 'prop-types';\r\nimport './GameField.css'\r\nimport CardList from './CardList';\r\nimport useCardNumberGenerator from '../CustomHooks/UseCardNumberGenerator';\r\nimport TimerComponent from './TimerComponent';\r\n\r\n\r\n\r\n\r\nfunction GameField(props) {\r\n    const { \r\n        availables, \r\n        addToSelecteds, \r\n        removeFromSelecteds,\r\n        secondsLeft } = useGameState();\r\n\r\n    const { cardNumbers } = useCardNumberGenerator(); \r\n\r\n    useEffect(() => {\r\n        if (availables.length === 0)        \r\n            props.onGameFinished('win');\r\n        if (secondsLeft === 0)\r\n            props.onGameFinished('lost');\r\n    });\r\n\r\n    const canHide = (number) => {\r\n        if (availables.includes(number)) \r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CardList \r\n            cardNumbers = {cardNumbers}\r\n            availables = {availables}\r\n            addToSelecteds={addToSelecteds} \r\n            removeFromSelecteds={removeFromSelecteds} \r\n            canHide={canHide}>\r\n\r\n            </CardList>\r\n            <TimerComponent secondsLeft={secondsLeft}></TimerComponent>\r\n        </div>\r\n        );\r\n}\r\n\r\nGameField.propTypes  = {\r\n    onGameFinished: PropTypes.func\r\n}\r\n\r\nexport default GameField;","import React from 'react';\r\nimport './StartButton.css'\r\nimport { PropTypes } from 'prop-types';\r\n\r\nfunction Button(props) {\r\n    return (\r\n    <button className=\"myButton\" onClick={() => {props.onStartGame('playing')}}>        \r\n        Start Game\r\n    </button>);\r\n}\r\n\r\nButton.propTypes  = {\r\n    onStartGame: PropTypes.func\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst Months = [\"January\", \"February\", \"March\", \"April\", \r\n\"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\nclass Today extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.Date = new Date();\r\n      }\r\n\r\n    BuildDate = () => {\r\n        return Months[this.Date.getMonth()] + \" - \" + this.Date.getUTCFullYear();\r\n    }\r\n\r\n    render() {\r\n        return <div>{this.BuildDate()}</div>;\r\n    }\r\n}\r\n\r\nexport default Today;\r\n","import React from 'react';\r\nimport Button  from './StartButton'\r\nimport { PropTypes } from 'prop-types';\r\nimport Today from './Today';\r\n\r\nfunction StartMenu(props) {        \r\n    return(\r\n        <div>\r\n            <h1>Welcome to Memo Test.</h1>\r\n            <Button onStartGame={props.startGame}/>\r\n            <Today /> \r\n        </div>\r\n    );    \r\n}\r\n\r\nStartMenu.propTypes  = {\r\n    startGame: PropTypes.func\r\n}\r\n\r\nexport default StartMenu;","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport Button from './StartButton';\r\n\r\nconst Credits = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>{props.message}</h1>\r\n            {props.status === 'win' ? <h1>You have won!</h1> : <h1>You Have Lost</h1>}\r\n            <h2>Thank you for playing.</h2>\r\n            <Button onStartGame={props.startGame}/>\r\n        </div>);\r\n}\r\n\r\nCredits.propTypes  = {\r\n    message: PropTypes.string,\r\n    startGame: PropTypes.func,\r\n    status: PropTypes.string\r\n}\r\n\r\nexport default Credits;\r\n","import { useState } from 'react';\r\n\r\nconst useApplicationState = () => {\r\n    const [gameStatus, setGameStatus] = useState('inMenu');\r\n    const [gameId, setGameId] = useState(0);\r\n  \r\n    const setStatus = (status) => {    \r\n      if (status === 'playing')\r\n        setGameId(gameId + 1);\r\n      setGameStatus(status);\r\n    }\r\n\r\n    return {gameStatus, gameId, setStatus};\r\n}\r\n\r\nexport default useApplicationState;","import React from 'react';\nimport './App.css';\nimport GameField from './Components/GameField';\nimport StartMenu from './Components/StartMenu';\nimport Credits from './Components/Credits';\nimport useApplicationState from './CustomHooks/UseApplicationState';\n\nfunction App() {\n  const { \n    setStatus, \n    gameStatus,     \n    gameId } = useApplicationState();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">   \n      {\n      gameStatus === 'inMenu' ? <StartMenu startGame={setStatus} /> \n      : gameStatus === 'playing' ? <GameField key={gameId} onGameFinished={setStatus} /> \n      : <Credits startGame={setStatus} status={gameStatus} />\n      }      \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}