{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sergio Scotto\\\\source\\\\repos\\\\react\\\\react-memo-test\\\\src\\\\Components\\\\GameField.js\";\nimport React, { useState, useEffect } from 'react';\nimport useGameState from '../CustomHooks/UseGameState';\nimport { PropTypes } from 'prop-types';\nimport './GameField.css';\nimport CardList from './CardList';\nconst utils = {\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1))\n};\n\nfunction shuffle(array) {\n  let counter = array.length; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    let index = Math.floor(Math.random() * counter); // Decrease counter by 1\n\n    counter--; // And swap the last element with it\n\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\nconst createRandomNumbers = () => {\n  let cardsNumbers = utils.range(1, 6).concat(utils.range(1, 6));\n  let shuffleCardNumbers = shuffle(cardsNumbers);\n  console.log(shuffleCardNumbers);\n  return shuffleCardNumbers;\n};\n\nfunction GameField(props) {\n  const {\n    availables,\n    addToSelecteds,\n    removeFromSelecteds\n  } = useGameState();\n  useEffect(() => {\n    if (availables.length == 0) props.onGameFinished('inCredits');\n  });\n\n  const canHide = number => {\n    if (availables.includes(number)) return true;\n    return false;\n  };\n\n  return /*#__PURE__*/React.createElement(CardList, {\n    addToSelecteds: addToSelecteds,\n    removeFromSelecteds: removeFromSelecteds,\n    canHide: canHide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  });\n}\n\nGameField.propTypes = {\n  onGameFinished: PropTypes.func\n};\nexport default GameField;","map":{"version":3,"sources":["C:/Users/Sergio Scotto/source/repos/react/react-memo-test/src/Components/GameField.js"],"names":["React","useState","useEffect","useGameState","PropTypes","CardList","utils","range","min","max","Array","from","length","_","i","random","Math","floor","shuffle","array","counter","index","temp","createRandomNumbers","cardsNumbers","concat","shuffleCardNumbers","console","log","GameField","props","availables","addToSelecteds","removeFromSelecteds","onGameFinished","canHide","number","includes","propTypes","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAO,iBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE,CAACC,GAAD,EAAMC,GAAN,KAAcC,KAAK,CAACC,IAAN,CAAW;AAACC,IAAAA,MAAM,EAAEH,GAAG,GAAGD,GAAN,GAAY;AAArB,GAAX,EAAoC,CAACK,CAAD,EAAIC,CAAJ,KAAUN,GAAG,GAAGM,CAApD,CADX;AAGVC,EAAAA,MAAM,EAAE,CAACP,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,MAAiBN,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX;AAHlB,CAAd;;AAMA,SAASU,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,MAAIC,OAAO,GAAGD,KAAK,CAACP,MAApB,CADoB,CAGpB;;AACA,SAAOQ,OAAO,GAAG,CAAjB,EAAoB;AAChB;AACA,QAAIC,KAAK,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgBK,OAA3B,CAAZ,CAFgB,CAIhB;;AACAA,IAAAA,OAAO,GALS,CAOhB;;AACA,QAAIE,IAAI,GAAGH,KAAK,CAACC,OAAD,CAAhB;AACAD,IAAAA,KAAK,CAACC,OAAD,CAAL,GAAiBD,KAAK,CAACE,KAAD,CAAtB;AACAF,IAAAA,KAAK,CAACE,KAAD,CAAL,GAAeC,IAAf;AACH;;AAED,SAAOH,KAAP;AACH;;AAED,MAAMI,mBAAmB,GAAG,MAAM;AAC9B,MAAIC,YAAY,GAAGlB,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBkB,MAAlB,CAAyBnB,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAzB,CAAnB;AACA,MAAImB,kBAAkB,GAAIR,OAAO,CAACM,YAAD,CAAjC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;AACA,SAAQA,kBAAR;AACH,CALD;;AAQA,SAASG,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,QAAM;AACFC,IAAAA,UADE;AAEFC,IAAAA,cAFE;AAGFC,IAAAA;AAHE,MAGsB9B,YAAY,EAHxC;AAKAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI6B,UAAU,CAACnB,MAAX,IAAqB,CAAzB,EACIkB,KAAK,CAACI,cAAN,CAAqB,WAArB;AACP,GAHQ,CAAT;;AAKA,QAAMC,OAAO,GAAIC,MAAD,IAAY;AACxB,QAAIL,UAAU,CAACM,QAAX,CAAoBD,MAApB,CAAJ,EACI,OAAO,IAAP;AACJ,WAAO,KAAP;AACH,GAJD;;AAMA,sBACQ,oBAAC,QAAD;AACA,IAAA,cAAc,EAAEJ,cADhB;AAEA,IAAA,mBAAmB,EAAEC,mBAFrB;AAGA,IAAA,OAAO,EAAEE,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADR;AAQH;;AAEDN,SAAS,CAACS,SAAV,GAAuB;AACnBJ,EAAAA,cAAc,EAAE9B,SAAS,CAACmC;AADP,CAAvB;AAIA,eAAeV,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport useGameState from '../CustomHooks/UseGameState'\r\nimport { PropTypes } from 'prop-types';\r\nimport './GameField.css'\r\nimport CardList from './CardList';\r\n\r\nconst utils = {\r\n    range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\r\n\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n}\r\n\r\nfunction shuffle(array) {\r\n    let counter = array.length;\r\n\r\n    // While there are elements in the array\r\n    while (counter > 0) {\r\n        // Pick a random index\r\n        let index = Math.floor(Math.random() * counter);\r\n\r\n        // Decrease counter by 1\r\n        counter--;\r\n\r\n        // And swap the last element with it\r\n        let temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst createRandomNumbers = () => {\r\n    let cardsNumbers = utils.range(1, 6).concat(utils.range(1, 6));   \r\n    let shuffleCardNumbers =  shuffle(cardsNumbers);\r\n    console.log(shuffleCardNumbers);\r\n    return  shuffleCardNumbers;\r\n}\r\n\r\n\r\nfunction GameField(props) {\r\n    const { \r\n        availables, \r\n        addToSelecteds, \r\n        removeFromSelecteds } = useGameState();\r\n\r\n    useEffect(() => {\r\n        if (availables.length == 0)        \r\n            props.onGameFinished('inCredits');\r\n    });\r\n\r\n    const canHide = (number) => {\r\n        if (availables.includes(number)) \r\n            return true;\r\n        return false;\r\n    }\r\n      \r\n    return (\r\n            <CardList \r\n            addToSelecteds={addToSelecteds} \r\n            removeFromSelecteds={removeFromSelecteds} \r\n            canHide={canHide}>\r\n\r\n            </CardList>\r\n        );\r\n}\r\n\r\nGameField.propTypes  = {\r\n    onGameFinished: PropTypes.func\r\n}\r\n\r\nexport default GameField;"]},"metadata":{},"sourceType":"module"}