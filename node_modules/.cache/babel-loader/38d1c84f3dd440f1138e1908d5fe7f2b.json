{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Sergio Scotto\\\\source\\\\repos\\\\react\\\\react-memo-test\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';var utils={range:function range(min,max){return Array.from({length:max-min+1},function(_,i){return min+i;});},random:function random(min,max){return min+Math.floor(Math.random()*(max-min+1));}};function shuffle(array){var counter=array.length;// While there are elements in the array\nwhile(counter>0){// Pick a random index\nvar index=Math.floor(Math.random()*counter);// Decrease counter by 1\ncounter--;// And swap the last element with it\nvar temp=array[counter];array[counter]=array[index];array[index]=temp;}return array;}var createRandomNumbers=function createRandomNumbers(){var cardsNumbers=utils.range(1,6).concat(utils.range(1,6));var shuffleCardNumbers=shuffle(cardsNumbers);return shuffleCardNumbers;};var useCardNumberGenerator=function useCardNumberGenerator(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),cardNumbers=_useState2[0],setCardNumbers=_useState2[1];//Es correcto usar el useEffect para llenar una unica vez el arreglo con numeros randoms?\nuseEffect(function(){if(cardNumbers.length===0)setCardNumbers(createRandomNumbers());},[cardNumbers.length]);return{cardNumbers:cardNumbers};};export default useCardNumberGenerator;","map":{"version":3,"sources":["C:/Users/Sergio Scotto/source/repos/react/react-memo-test/src/CustomHooks/UseCardNumberGenerator.js"],"names":["useState","useEffect","utils","range","min","max","Array","from","length","_","i","random","Math","floor","shuffle","array","counter","index","temp","createRandomNumbers","cardsNumbers","concat","shuffleCardNumbers","useCardNumberGenerator","cardNumbers","setCardNumbers"],"mappings":"2LAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAGA,GAAMC,CAAAA,KAAK,CAAG,CACVC,KAAK,CAAE,eAACC,GAAD,CAAMC,GAAN,QAAcC,CAAAA,KAAK,CAACC,IAAN,CAAW,CAACC,MAAM,CAAEH,GAAG,CAAGD,GAAN,CAAY,CAArB,CAAX,CAAoC,SAACK,CAAD,CAAIC,CAAJ,QAAUN,CAAAA,GAAG,CAAGM,CAAhB,EAApC,CAAd,EADG,CAGVC,MAAM,CAAE,gBAACP,GAAD,CAAMC,GAAN,QAAcD,CAAAA,GAAG,CAAGQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,IAAiBN,GAAG,CAAGD,GAAN,CAAY,CAA7B,CAAX,CAApB,EAHE,CAAd,CAMA,QAASU,CAAAA,OAAT,CAAiBC,KAAjB,CAAwB,CACpB,GAAIC,CAAAA,OAAO,CAAGD,KAAK,CAACP,MAApB,CAEA;AACA,MAAOQ,OAAO,CAAG,CAAjB,CAAoB,CAChB;AACA,GAAIC,CAAAA,KAAK,CAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,GAAgBK,OAA3B,CAAZ,CAEA;AACAA,OAAO,GAEP;AACA,GAAIE,CAAAA,IAAI,CAAGH,KAAK,CAACC,OAAD,CAAhB,CACAD,KAAK,CAACC,OAAD,CAAL,CAAiBD,KAAK,CAACE,KAAD,CAAtB,CACAF,KAAK,CAACE,KAAD,CAAL,CAAeC,IAAf,CACH,CAED,MAAOH,CAAAA,KAAP,CACH,CAED,GAAMI,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9B,GAAIC,CAAAA,YAAY,CAAGlB,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAe,CAAf,EAAkBkB,MAAlB,CAAyBnB,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAe,CAAf,CAAzB,CAAnB,CACA,GAAImB,CAAAA,kBAAkB,CAAIR,OAAO,CAACM,YAAD,CAAjC,CACA,MAAQE,CAAAA,kBAAR,CACH,CAJD,CAMA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,eACKvB,QAAQ,CAAC,EAAD,CADb,wCAC1BwB,WAD0B,eACbC,cADa,eAGjC;AACAxB,SAAS,CAAC,UAAM,CACZ,GAAIuB,WAAW,CAAChB,MAAZ,GAAuB,CAA3B,CACIiB,cAAc,CAACN,mBAAmB,EAApB,CAAd,CACP,CAHQ,CAGP,CAACK,WAAW,CAAChB,MAAb,CAHO,CAAT,CAKA,MAAO,CAAEgB,WAAW,CAAXA,WAAF,CAAP,CACH,CAVD,CAYA,cAAeD,CAAAA,sBAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n\r\nconst utils = {\r\n    range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\r\n\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n}\r\n\r\nfunction shuffle(array) {\r\n    let counter = array.length;\r\n\r\n    // While there are elements in the array\r\n    while (counter > 0) {\r\n        // Pick a random index\r\n        let index = Math.floor(Math.random() * counter);\r\n\r\n        // Decrease counter by 1\r\n        counter--;\r\n\r\n        // And swap the last element with it\r\n        let temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst createRandomNumbers = () => {\r\n    let cardsNumbers = utils.range(1, 6).concat(utils.range(1, 6));   \r\n    let shuffleCardNumbers =  shuffle(cardsNumbers);\r\n    return  shuffleCardNumbers;\r\n}\r\n\r\nconst useCardNumberGenerator = () => {\r\n    const [cardNumbers, setCardNumbers] = useState([]);\r\n\r\n    //Es correcto usar el useEffect para llenar una unica vez el arreglo con numeros randoms?\r\n    useEffect(() => {\r\n        if (cardNumbers.length === 0)\r\n            setCardNumbers(createRandomNumbers());\r\n    },[cardNumbers.length])\r\n\r\n    return { cardNumbers };\r\n}\r\n\r\nexport default useCardNumberGenerator;"]},"metadata":{},"sourceType":"module"}