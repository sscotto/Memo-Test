{"ast":null,"code":"import { useState, useEffect } from 'react';\nconst utils = {\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1))\n};\n\nfunction shuffle(array) {\n  let counter = array.length; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    let index = Math.floor(Math.random() * counter); // Decrease counter by 1\n\n    counter--; // And swap the last element with it\n\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\nconst createRandomNumbers = () => {\n  let cardsNumbers = utils.range(1, 6).concat(utils.range(1, 6));\n  let shuffleCardNumbers = shuffle(cardsNumbers);\n  return shuffleCardNumbers;\n};\n\nconst useCardNumberGenerator = () => {\n  const [cardNumbers, setCardNumbers] = useState([]); //Es correcto usar el useEffect para llenar una unica vez el arreglo con numeros randoms?\n\n  useEffect(() => {\n    setCardNumbers(createRandomNumbers());\n  }, cardNumbers.length);\n  return {\n    cardNumbers\n  };\n};\n\nexport default useCardNumberGenerator;","map":{"version":3,"sources":["C:/Users/Sergio Scotto/source/repos/react/react-memo-test/src/CustomHooks/UseCardNumberGenerator.js"],"names":["useState","useEffect","utils","range","min","max","Array","from","length","_","i","random","Math","floor","shuffle","array","counter","index","temp","createRandomNumbers","cardsNumbers","concat","shuffleCardNumbers","useCardNumberGenerator","cardNumbers","setCardNumbers"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAGA,MAAMC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE,CAACC,GAAD,EAAMC,GAAN,KAAcC,KAAK,CAACC,IAAN,CAAW;AAACC,IAAAA,MAAM,EAAEH,GAAG,GAAGD,GAAN,GAAY;AAArB,GAAX,EAAoC,CAACK,CAAD,EAAIC,CAAJ,KAAUN,GAAG,GAAGM,CAApD,CADX;AAGVC,EAAAA,MAAM,EAAE,CAACP,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,MAAiBN,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX;AAHlB,CAAd;;AAMA,SAASU,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,MAAIC,OAAO,GAAGD,KAAK,CAACP,MAApB,CADoB,CAGpB;;AACA,SAAOQ,OAAO,GAAG,CAAjB,EAAoB;AAChB;AACA,QAAIC,KAAK,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgBK,OAA3B,CAAZ,CAFgB,CAIhB;;AACAA,IAAAA,OAAO,GALS,CAOhB;;AACA,QAAIE,IAAI,GAAGH,KAAK,CAACC,OAAD,CAAhB;AACAD,IAAAA,KAAK,CAACC,OAAD,CAAL,GAAiBD,KAAK,CAACE,KAAD,CAAtB;AACAF,IAAAA,KAAK,CAACE,KAAD,CAAL,GAAeC,IAAf;AACH;;AAED,SAAOH,KAAP;AACH;;AAED,MAAMI,mBAAmB,GAAG,MAAM;AAC9B,MAAIC,YAAY,GAAGlB,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBkB,MAAlB,CAAyBnB,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAzB,CAAnB;AACA,MAAImB,kBAAkB,GAAIR,OAAO,CAACM,YAAD,CAAjC;AACA,SAAQE,kBAAR;AACH,CAJD;;AAMA,MAAMC,sBAAsB,GAAG,MAAM;AACjC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAC,EAAD,CAA9C,CADiC,CAGjC;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACRwB,IAAAA,cAAc,CAACN,mBAAmB,EAApB,CAAd;AACP,GAFQ,EAENK,WAAW,CAAChB,MAFN,CAAT;AAIA,SAAO;AAAEgB,IAAAA;AAAF,GAAP;AACH,CATD;;AAWA,eAAeD,sBAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n\r\nconst utils = {\r\n    range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\r\n\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n}\r\n\r\nfunction shuffle(array) {\r\n    let counter = array.length;\r\n\r\n    // While there are elements in the array\r\n    while (counter > 0) {\r\n        // Pick a random index\r\n        let index = Math.floor(Math.random() * counter);\r\n\r\n        // Decrease counter by 1\r\n        counter--;\r\n\r\n        // And swap the last element with it\r\n        let temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst createRandomNumbers = () => {\r\n    let cardsNumbers = utils.range(1, 6).concat(utils.range(1, 6));   \r\n    let shuffleCardNumbers =  shuffle(cardsNumbers);\r\n    return  shuffleCardNumbers;\r\n}\r\n\r\nconst useCardNumberGenerator = () => {\r\n    const [cardNumbers, setCardNumbers] = useState([]);\r\n\r\n    //Es correcto usar el useEffect para llenar una unica vez el arreglo con numeros randoms?\r\n    useEffect(() => {        \r\n            setCardNumbers(createRandomNumbers());\r\n    }, cardNumbers.length)\r\n\r\n    return { cardNumbers };\r\n}\r\n\r\nexport default useCardNumberGenerator;"]},"metadata":{},"sourceType":"module"}