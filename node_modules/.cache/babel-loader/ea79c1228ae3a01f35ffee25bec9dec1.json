{"ast":null,"code":"import { useState } from 'react';\nconst utils = {\n  range: (min, max) => Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i),\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1))\n};\n\nfunction shuffle(array) {\n  let counter = array.length; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    let index = Math.floor(Math.random() * counter); // Decrease counter by 1\n\n    counter--; // And swap the last element with it\n\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\nconst createRandomNumbers = () => {\n  let cardsNumbers = utils.range(1, 6).concat(utils.range(1, 6));\n  let shuffleCardNumbers = shuffle(cardsNumbers);\n  console.log(shuffleCardNumbers);\n  return shuffleCardNumbers;\n};\n\nconst useGameState = () => {\n  const [selecteds, setSelecteds] = useState([]);\n  const [availables, setAvailables] = useState([1, 2, 3, 4, 5, 6]);\n  const [cardNumbers] = useState(createRandomNumbers());\n\n  const addToSelecteds = number => {\n    let canAddToSelecteds = selecteds.length === 2 ? false : true;\n\n    if (canAddToSelecteds) {\n      let newSelecteds = selecteds.concat(number);\n      setSelecteds(newSelecteds);\n\n      if (newSelecteds.length === 2 && newSelecteds[0] === newSelecteds[1]) {\n        setAvailables(availables.filter(e => e !== number));\n        setSelecteds([]);\n      }\n    }\n\n    return canAddToSelecteds;\n  };\n\n  const removeFromSelecteds = number => {\n    if (selecteds.length === 0) return;\n    setSelecteds(selecteds.filter(s => s !== number));\n  };\n\n  return {\n    selecteds,\n    availables,\n    addToSelecteds,\n    removeFromSelecteds,\n    cardNumbers\n  };\n};\n\nexport default useGameState;","map":{"version":3,"sources":["C:/Users/Sergio Scotto/source/repos/react/react-memo-test/src/CustomHooks/UseGameState.js"],"names":["useState","utils","range","min","max","Array","from","length","_","i","random","Math","floor","shuffle","array","counter","index","temp","createRandomNumbers","cardsNumbers","concat","shuffleCardNumbers","console","log","useGameState","selecteds","setSelecteds","availables","setAvailables","cardNumbers","addToSelecteds","number","canAddToSelecteds","newSelecteds","filter","e","removeFromSelecteds","s"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE,CAACC,GAAD,EAAMC,GAAN,KAAcC,KAAK,CAACC,IAAN,CAAW;AAACC,IAAAA,MAAM,EAAEH,GAAG,GAAGD,GAAN,GAAY;AAArB,GAAX,EAAoC,CAACK,CAAD,EAAIC,CAAJ,KAAUN,GAAG,GAAGM,CAApD,CADX;AAGVC,EAAAA,MAAM,EAAE,CAACP,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,MAAiBN,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX;AAHlB,CAAd;;AAMA,SAASU,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,MAAIC,OAAO,GAAGD,KAAK,CAACP,MAApB,CADoB,CAGpB;;AACA,SAAOQ,OAAO,GAAG,CAAjB,EAAoB;AAChB;AACA,QAAIC,KAAK,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgBK,OAA3B,CAAZ,CAFgB,CAIhB;;AACAA,IAAAA,OAAO,GALS,CAOhB;;AACA,QAAIE,IAAI,GAAGH,KAAK,CAACC,OAAD,CAAhB;AACAD,IAAAA,KAAK,CAACC,OAAD,CAAL,GAAiBD,KAAK,CAACE,KAAD,CAAtB;AACAF,IAAAA,KAAK,CAACE,KAAD,CAAL,GAAeC,IAAf;AACH;;AAED,SAAOH,KAAP;AACH;;AAED,MAAMI,mBAAmB,GAAG,MAAM;AAC9B,MAAIC,YAAY,GAAGlB,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBkB,MAAlB,CAAyBnB,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAzB,CAAnB;AACA,MAAImB,kBAAkB,GAAIR,OAAO,CAACM,YAAD,CAAjC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,kBAAZ;AACA,SAAQA,kBAAR;AACH,CALD;;AAOA,MAAMG,YAAY,GAAG,MAAM;AACvB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B1B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAD,CAA5C;AACA,QAAM,CAAC6B,WAAD,IAAgB7B,QAAQ,CAACkB,mBAAmB,EAApB,CAA9B;;AAEA,QAAMY,cAAc,GAAIC,MAAD,IAAY;AAC/B,QAAIC,iBAAiB,GAAIP,SAAS,CAAClB,MAAV,KAAqB,CAAtB,GAA2B,KAA3B,GAAmC,IAA3D;;AAEA,QAAIyB,iBAAJ,EAAsB;AAClB,UAAIC,YAAY,GAAGR,SAAS,CAACL,MAAV,CAAiBW,MAAjB,CAAnB;AACAL,MAAAA,YAAY,CAACO,YAAD,CAAZ;;AACA,UAAIA,YAAY,CAAC1B,MAAb,KAAwB,CAAxB,IAA6B0B,YAAY,CAAC,CAAD,CAAZ,KAAoBA,YAAY,CAAC,CAAD,CAAjE,EAAqE;AAEjEL,QAAAA,aAAa,CAACD,UAAU,CAACO,MAAX,CAAkBC,CAAC,IAAIA,CAAC,KAAKJ,MAA7B,CAAD,CAAb;AACAL,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACH;AACJ;;AACD,WAAOM,iBAAP;AACH,GAbD;;AAeA,QAAMI,mBAAmB,GAAIL,MAAD,IAAY;AACpC,QAAIN,SAAS,CAAClB,MAAV,KAAqB,CAAzB,EAA4B;AAE5BmB,IAAAA,YAAY,CAACD,SAAS,CAACS,MAAV,CAAiBG,CAAC,IAAIA,CAAC,KAAKN,MAA5B,CAAD,CAAZ;AACH,GAJD;;AAKA,SAAO;AAAEN,IAAAA,SAAF;AAAaE,IAAAA,UAAb;AAAyBG,IAAAA,cAAzB;AAAyCM,IAAAA,mBAAzC;AAA8DP,IAAAA;AAA9D,GAAP;AACH,CA1BD;;AA4BA,eAAeL,YAAf","sourcesContent":["import { useState } from 'react';\r\n\r\nconst utils = {\r\n    range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\r\n\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n}\r\n\r\nfunction shuffle(array) {\r\n    let counter = array.length;\r\n\r\n    // While there are elements in the array\r\n    while (counter > 0) {\r\n        // Pick a random index\r\n        let index = Math.floor(Math.random() * counter);\r\n\r\n        // Decrease counter by 1\r\n        counter--;\r\n\r\n        // And swap the last element with it\r\n        let temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst createRandomNumbers = () => {\r\n    let cardsNumbers = utils.range(1, 6).concat(utils.range(1, 6));   \r\n    let shuffleCardNumbers =  shuffle(cardsNumbers);\r\n    console.log(shuffleCardNumbers);\r\n    return  shuffleCardNumbers;\r\n}\r\n\r\nconst useGameState = () => {\r\n    const [selecteds, setSelecteds] = useState([]);\r\n    const [availables, setAvailables] = useState([1, 2, 3, 4, 5, 6]); \r\n    const [cardNumbers] = useState(createRandomNumbers());\r\n    \r\n    const addToSelecteds = (number) => {\r\n        let canAddToSelecteds = (selecteds.length === 2) ? false : true;\r\n        \r\n        if (canAddToSelecteds){        \r\n            let newSelecteds = selecteds.concat(number);\r\n            setSelecteds(newSelecteds)            \r\n            if (newSelecteds.length === 2 && newSelecteds[0] === newSelecteds[1]){ \r\n               \r\n                setAvailables(availables.filter(e => e !== number ));\r\n                setSelecteds([]);\r\n            }           \r\n        }\r\n        return canAddToSelecteds;\r\n    }       \r\n\r\n    const removeFromSelecteds = (number) => {\r\n        if (selecteds.length === 0) return;\r\n\r\n        setSelecteds(selecteds.filter(s => s !== number));\r\n    }\r\n    return { selecteds, availables, addToSelecteds, removeFromSelecteds, cardNumbers };\r\n}\r\n\r\nexport default useGameState;"]},"metadata":{},"sourceType":"module"}